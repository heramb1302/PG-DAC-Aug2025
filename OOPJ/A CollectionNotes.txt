


Collections in Java:
____________________

Any group of individual objects which are represented as a single unit is known as the collection of the objects.

The Collection interface (java.util.Collection) and Map interface (java.util.Map) are the two main ‚Äúroot‚Äù interfaces of Java collection classes.

What is a Framework?
____________________

A framework is a set of classes and interfaces which provide a ready-made architecture. In order to implement a new feature or a class, there is no need to define a framework.


Advantages of the Collection Framework: 
_______________________________________

1)Consistent API: 
The API has a basic set of interfaces like Collection, Set, List, or Map, all the classes (ArrayList, LinkedList, Vector, etc) that implement these interfaces have some common set of methods.
 
2)Reduces programming effort: 
A programmer doesn‚Äôt have to worry about the design of the Collection but rather he can focus on its best use in his program. Therefore, the basic concept of Object-oriented programming (i.e.) abstraction has been successfully implemented.
 
3)Increases program speed and quality: 
Increases performance by providing high-performance implementations of useful data structures and algorithms because in this case, the programmer need not think of the best implementation of a specific data structure. He can simply use the best implementation to drastically boost the performance of his algorithm/program.

Hierarchy of the Collection Framework:
______________________________________

1)Collection Interface
	A)List Interface
		I)ArrayList Class
		II)LinkedList Class
		III)Stack Class
		IV)Vector Class

	B)Set Interface
		I)EnumSet Class
		II)HashSet Class
		III)LinkedHashSet Class
		IV)TreeSet Class (Sorted)

	C)Queue Interface
		I)ArrayDeque Class
		II)LinkedList Class
		III)PriorityQueue Class

2)Map Interface
		I)HashMap Class
		II)TreeMap Class (Sorted)
		III)EnumMap Class
		IV)LinkedMap Class
		V)WeakHashMap Class

3)Iterator Interface
		I)ListInterator Class
		
4)Arrays Class
		I)Sort method
		II)Binary Search method
		III)many more algorith method
5)Collection Class
		I)Sort method
		II)Binary Search method
		III)many more algorith method
-------------------------------------------

List Interface: 
 _______________

 This is a child interface of the collection interface. This interface is dedicated to the data of the list type in which we can store all the ordered collection of the objects. This also allows duplicate data to be present in it. This list interface is implemented by various classes like ArrayList, Vector, Stack, etc. Since all the subclasses implement the list, we can instantiate a list object with any of these classes. For example, 
 
üìùSyntax: This type of safelist can be defined as:
__________________________________________________

List <T> list = new ArrayList<> (); 
List <T> list = new LinkedList<> (); 
List <T> list = new Vector<> (); 
List <T> list = new Stack<> (); 

ü§¢Note: Where T is the type of the object to be stored in List 


Operations in a List interface:
_______________________________

Since List is an interface, it can be used only with a class that implements this interface. Now, let‚Äôs see how to perform a few frequently used operations on the List.  

Operation 1: Adding elements to List class using add() method
Operation 2: Updating elements in List class using set() method
Operation 3: Removing elements using remove() method

Parameters:  It takes 2 parameters, namely: 
___________________________________________

üö•add(Object): 
This method is used to add an element at the end of the List.

üö•add(int index, Object): 
This method is used to add an element at a specific index in the List

üö•set(int index, object): 
update the object at index

üö•remove(Object): 
This method is used to simply remove an object from the List. If there are multiple such objects, then the first occurrence of the object is removed.

üö•remove(int index): 
Since a List is indexed, this method takes an integer value which simply removes the element present at that specific index in the List. After removing the element, all the elements are moved to the left to fill the space and the indices of the objects are updated.

ü§¢Methods: There are multiple ways to iterate through the List. The most famous ways are by using the basic for loop in combination with a "get() method" to get the element at a specific index and the advanced for a loop. 
---------------------------------------------------------

Set Interface: 
_______________

A set is an unordered collection of objects in which duplicate values cannot be stored. 
This set interface is implemented by various classes like HashSet, TreeSet, LinkedHashSet, etc. For example, 

üìùSyntax: This type of safelist can be defined as:
__________________________________________________

Set<T> set = new HashSet<> (); 
Set<T> set = new LinkedHashSet<> (); 
Set<T> set = new TreeSet<> (); 

ü§¢Note: Where T is the type of the object to be stored in List 

Operations on the Set Interface: (UNSORTED SET)
_______________________________________________

set1 = [1, 3, 2, 4, 8, 9, 0]
set2 = [1, 3, 7, 5, 4, 0, 7, 5]
Then the possible operations on the sets are:

1. Intersection: retainAll()
Intersection = [0, 1, 3, 4] 

2. Union: addAll()
Union = [0, 1, 2, 3, 4, 5, 7, 8, 9] 

3. Difference: removeAll()
Difference = [2, 8, 9]

Operations on the Set Interface: (SORTED SET)
_______________________________________________

Operations 1: Adding Elements -> add()
Operations 2: Accessing elements -> contains()
Operations 3: Removing elements -> remove()
Operations 4: Iterating elements -> for each loop
Operations 5: Iterating through Set -> Iterator intarface

--------------------------------------------------------

Queue Interface: 
_______________

A queue interface maintains the FIFO(First In First Out) order similar to a real-world queue line. 

There are various classes like PriorityQueue, ArrayDeque, etc. Since all these subclasses implement the queue, we can instantiate a queue object with any of these classes. For example, 

üìùSyntax: This type of safelist can be defined as:
__________________________________________________

Queue <T> queue = new PriorityQueue<> (); 
Queue <T> queue = new ArrayDeque<> ();
Queue <T> queue = new LinkedList<> ();  

ü§¢Note: Where T is the type of the object to be stored in List 

Operations in a Queue interface:
________________________________

The Queue interface includes all the methods of the Collection interface. It is because Collection is the super interface of Queue.

Some of the commonly used methods of the Queue interface are:

Operation 1: 
____________

add() - Inserts the specified element into the queue. If the task is successful, add() returns true, if not it throws an exception.

offer() - Inserts the specified element into the queue. If the task is successful, offer() returns true, if not it returns false.

Operation 2: 
____________

element() - Returns the head of the queue. Throws an exception if the queue is empty.
peek() - Returns the head of the queue. Returns null if the queue is empty.

Operation 3:
____________ 

remove() - Returns and removes the head of the queue. Throws an exception if the queue is empty.
poll() - Returns and removes the head of the queue. Returns null if the queue is empty.

------------------------------------------------------------------

Map Interface: 
_______________

A map is a data structure that supports the key-value pair mapping for the data. This interface doesn‚Äôt support duplicate keys because the same key cannot have multiple mappings.

This map interface is implemented by various classes like HashMap, TreeMap, etc. Since all the subclasses implement the map, we can instantiate a map object with any of these classes. For example,

üìùSyntax: This type of safelist can be defined as:
__________________________________________________

Map<T> map = new HashMap<> (); 
Map<T> map = new TreeMap<> ();
Map<T> map = new LinkedHashMap<> (); 
 

ü§¢Note: Where T is the type of the object to be stored in List 

Operations on the Set Interface: (UNSORTED SET)
_______________________________________________

Operations 1: Adding Elements -> put()
Operation 2: Changing Element -> put()
Operations 3: Removing elements -> remove()
Operations 4: Iterating elements -> through map
